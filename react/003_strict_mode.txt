React's Strict Mode is a feature that helps developers identify potential problems in an application. It activates additional checks and warnings for its descendants and helps ensure that components are following best practices. Strict Mode does not render any visible UI and does not affect the production build; it only works in development mode.


# ----------------------- Key Features of Strict Mode: ----------------------- #
  1. Identifying Unsafe Lifecycles: Detects usage of deprecated lifecycle methods.
  2. Warning About Legacy String Refs: Identifies legacy string refs usage.
  3. Detecting Unexpected Side Effects: Helps detect side effects in the render phase.
  4. Ensuring Reusable State: Ensures that components are resilient to rerenders.

# --------------- 1. Wrapping your application with StrictMode: -------------- #
This is typically done in the index.js file
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
import React from 'react';
import ReactDOM from 'react-dom';
import App from './App';

ReactDOM.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
  document.getElementById('root')
);
//////////////////////////////////////////////

# -------- 2. Using StrictMode for specific parts of your application: ------- #
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
import React from 'react';
import ReactDOM from 'react-dom';
import App from './App';
import SomeComponent from './SomeComponent';

ReactDOM.render(
  <React.StrictMode>
    <App />
    <SomeComponent />
  </React.StrictMode>,
  document.getElementById('root')
);
//////////////////////////////////////////////

Explanation:
  1. React.StrictMode: The React.StrictMode component is used to wrap the part of the application where you want to enable strict mode checks.
  2. App Component: In this example, the App component and all its child components will be subject to the strict mode checks.

# ---------------------- Benefits of Using Strict Mode: ---------------------- #
  1. Helps Identify Potential Problems: By enabling additional checks, Strict Mode helps identify potential issues early in development.
  2. Encourages Best Practices: It encourages following best practices, such as avoiding deprecated lifecycle methods.
  Improves Future Compatibility: Helps prepare your codebase for future versions of React by identifying unsafe patterns.

# ----------------- Common Warnings Detected by Strict Mode: ----------------- #
  1. Unsafe Lifecycle Methods: Usage of lifecycle methods like componentWillMount, componentWillReceiveProps, and componentWillUpdate is flagged.
  2. Legacy String Refs: Using string refs instead of callback refs or React.createRef.
  3. Side Effects in Render: Performing side effects inside the render method, which should be pure.
  4. Concurrent Mode Warnings: Identifies components that might not be concurrent mode safe.
