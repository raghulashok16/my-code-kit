Strings and Template Literals in JavaScript 🛩️🛩️

Strings 🛩️🛩️
✅ Strings are sequences of characters used to represent text in JavaScript. They can be enclosed in single quotes (`'`), double quotes (`"`), or backticks (`` ` ``).


✅ Syntax:
🚩🚩🚩🚩
// Single quotes
let str1 = 'Hello World';

// Double quotes
let str2 = "Hello World";

// Backticks (template literals - more on this below)
let str3 = `Hello World`;
⚡⚡⚡⚡

✅ Explanation:
- Strings are primitive data types in JavaScript
- They are immutable (cannot be changed once created)
- You can access characters using index notation: `str1[0]` returns 'H'
- Common string methods include `length`, `toUpperCase()`, `toLowerCase()`, `indexOf()`, `slice()`, etc.

Template Literals 🛩️🛩️
✅ Template literals (also called template strings) are string literals that allow embedded expressions and multi-line strings. They are enclosed by backtick (`` ` ``) characters.

✅ Syntax:
🚩🚩🚩🚩
// Basic template literal
let name = 'John';
let greeting = `Hello, ${name}!`;

// Multi-line string
let message = `This is a
multi-line
string`;

// Expression interpolation
let a = 5;
let b = 10;
let result = `The sum of ${a} and ${b} is ${a + b}`;

// Tagged templates
function tag(strings, ...values) {
  // Process strings and values
}
let taggedResult = tag`The sum is ${a + b}`;
⚡⚡⚡⚡

✅ Explanation:
- Template literals allow embedded expressions using `${expression}` syntax
- They support multi-line strings without needing escape characters like `\n`
- Expression interpolation lets you insert variables and expressions directly into strings
- Tagged templates allow you to parse template literals with a function
- Template literals preserve whitespace and line breaks

✅ Key Differences from Regular Strings:
1. Use backticks instead of quotes
2. Allow multi-line strings without special characters
3. Enable easy string interpolation with `${}` syntax
4. Support tagged templates for advanced use cases

Template literals are generally preferred in modern JavaScript code due to their increased readability and functionality.