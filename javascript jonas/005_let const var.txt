In JavaScript, `let`, `const`, and `var` are used to declare variables, but they differ in terms of scope, hoisting, and reassignment. Here's a breakdown: 🛩️🛩️

1.✅  `var` (ES5 and earlier)
   - Function-scoped: Variables declared with `var` are scoped to the nearest function block (or global if outside a function).
   - Hoisted: `var` declarations are moved to the top of their scope during compilation, but their assignments are not.
   - Can be redeclared & updated: You can change the value and even redeclare the same variable.
   - No block scope: Not limited by `if`, `for`, or other block statements.

🚩🚩🚩🚩
   var x = 10;
   if (true) {
     var x = 20; // Same variable!
   }
   console.log(x); // 20 (not block-scoped)
⚡⚡⚡⚡

2.✅  `let` (ES6+)
   - Block-scoped: Variables are limited to the nearest enclosing block (`{}`), like `if`, `for`, or functions.
   - Hoisted but not initialized: Unlike `var`, `let` variables are not accessible before declaration (Temporal Dead Zone).
   - Can be updated but not redeclared: You can change the value, but not redeclare in the same scope.

🚩🚩🚩🚩
   let y = 10;
   if (true) {
     let y = 20; // Different variable (block-scoped)
   }
   console.log(y); // 10
⚡⚡⚡⚡

3.✅  `const` (ES6+)
   - Block-scoped: Like `let`, it’s limited to the nearest block.
   - Cannot be reassigned: Must be initialized at declaration, and its value cannot change (for primitives).
   - Not immutable for objects/arrays: The variable itself can’t be reassigned, but its properties/elements can be modified.

🚩🚩🚩🚩
   const z = 30;
   // z = 40; // Error (reassignment not allowed)

   const obj = { a: 1 };
   obj.a = 2; // Allowed (property change is fine)
⚡⚡⚡⚡

✅ Key Differences:
| Feature      | `var`            | `let`            | `const`          |
|--------------|------------------|------------------|------------------|
| Scope    | Function/Global  | Block            | Block            |
| Hoisting | Yes (undefined)  | Yes (TDZ)        | Yes (TDZ)        |
| Reassign | Yes              | Yes              | No               |
| Redeclare| Yes              | No               | No               |
| Use Case | Legacy code      | Mutable variables| Constants        |

✅ Best Practices:
- Use `const` by default (for values that shouldn’t change).
- Use `let` when reassignment is needed.
- Avoid `var` (due to scoping issues and hoisting surprises).

✅ Example:
🚩🚩🚩🚩
function example() {
  var a = 1; // Function-scoped
  let b = 2; // Block-scoped
  const c = 3; // Block-scoped + immutable binding

  if (true) {
    var a = 100; // Same variable
    let b = 200; // Different variable
    // c = 300; // Error!
  }

  console.log(a); // 100
  console.log(b); // 2
}
⚡⚡⚡⚡
