Arrow Functions in JavaScript 🛩️🛩️
✅ Arrow functions (also called "fat arrow functions") are a concise syntax
 for writing function expressions in JavaScript, introduced in ES6 (ECMAScript 2015). 
✅ They provide a shorter syntax compared to traditional function expressions
 and have some differences in how they handle the `this` keyword.

✅ Basic Syntax
🚩🚩🚩🚩
// Traditional function expression
const add = function(a, b) {
  return a + b;
};

// Arrow function equivalent
const add = (a, b) => {
  return a + b;
};
⚡⚡⚡⚡

Shorter Variations 🛩️🛩️
1.✅  Single parameter: Parentheses are optional
🚩🚩🚩🚩
   const square = x => {
     return x * x;
   };
⚡⚡⚡⚡

2.✅  No parameters: Must include empty parentheses
🚩🚩🚩🚩
   const greet = () => {
     return "Hello!";
   };
⚡⚡⚡⚡

3.✅  Single expression: Implicit return (no curly braces needed)
🚩🚩🚩🚩
   const multiply = (a, b) => a * b;
⚡⚡⚡⚡

4.✅  Returning an object: Wrap in parentheses
🚩🚩🚩🚩
   const createPerson = (name, age) => ({ name: name, age: age });
⚡⚡⚡⚡

Key Differences from Regular Functions 🛩️🛩️
1.✅  `this` binding: Arrow functions don't have their own `this` context - they inherit `this`
 from the surrounding lexical scope.
🚩🚩🚩🚩
   function Timer() {
     this.seconds = 0;
     
     // Traditional function - has its own 'this'
     setInterval(function() {
       this.seconds++; // Won't work - 'this' refers to the interval
     }, 1000);
     
     // Arrow function - inherits 'this' from Timer
     setInterval(() => {
       this.seconds++; // Works as expected
     }, 1000);
   }
⚡⚡⚡⚡

2.✅  No `arguments` object: Arrow functions don't have their own `arguments` object.
🚩🚩🚩🚩
   const showArgs = () => {
     console.log(arguments); // ReferenceError: arguments is not defined
   };
⚡⚡⚡⚡

3.✅  Cannot be used as constructors: Arrow functions cannot be called with `new`.
🚩🚩🚩🚩
   const Foo = () => {};
   const bar = new Foo(); // TypeError: Foo is not a constructor
⚡⚡⚡⚡

4.✅  No prototype property: Arrow functions don't have a `prototype` property.


✅ When to Use Arrow Functions
- For short, simple functions (especially callbacks)
- When you want to preserve the lexical `this` binding
- For functional programming patterns (map, filter, reduce)

✅ When Not to Use Arrow Functions
- As object methods (if you need access to the object via `this`)
- When you need the `arguments` object
- When you need to use the function as a constructor
- For event handlers where you might need access to the event target via `this`

✅ Examples in Common Use Cases
🚩🚩🚩🚩
// Array methods
const numbers = [1, 2, 3];
const doubled = numbers.map(n => n * 2);

// Promises
fetch('https://api.example.com')
  .then(response => response.json())
  .then(data => console.log(data))
  .catch(error => console.error('Error:', error));

// Short callbacks
button.addEventListener('click', () => console.log('Clicked!'));
⚡⚡⚡⚡

✅ Arrow functions provide a cleaner, more concise syntax in many cases, but it's
 important to understand their differences from traditional functions to use them effectively.