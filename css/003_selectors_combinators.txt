CSS selectors and combinators are used to target and style HTML elements in various ways. Here are the practical use cases for different types of CSS selectors and combinators:

# ------------------------------ Basic Selectors ----------------------------- #

1. Element Selectors:
   - Target and style elements based on their tag names.
   - Example: Style all paragraphs `<p>` with a specific font size.

2. Class Selectors:
   - Target and style elements based on their class attribute.
   - Example: Apply a background color to all elements with the class "highlight".

3. ID Selectors:
   - Target and style a single element based on its ID attribute.
   - Example: Style a unique header with a specific font size and color.

4. Universal Selector:
   - Select and style all elements on the page.
   - Example: Reset the margin and padding for all elements to ensure consistent styling.

# ---------------------------- Attribute Selectors --------------------------- #

5. Attribute Presence Selector:
   - Target elements that have a specific attribute.
   - Example: Style input fields that have the `required` attribute.

6. Attribute Value Selector:
   - Target elements based on the value of an attribute.
   - Example: Style links `<a>` that open in a new tab (`target="_blank"`).

7. Attribute Prefix Selector:
   - Target elements whose attribute value starts with a specific prefix.
   - Example: Style links with href attributes that start with "http".

8. Attribute Substring Selector:
   - Target elements whose attribute value contains a specific substring.
   - Example: Style elements where the class attribute contains "nav".

# ------------------------------ Pseudo-classes ------------------------------ #

9. Hover Pseudo-class:
   - Style elements when they are hovered over by the mouse pointer.
   - Example: Change the background color of buttons on hover.

10. Active Pseudo-class:
    - Style elements when they are in an active state (e.g., a clicked link).
    - Example: Change the color of links when they are clicked.

11. Focus Pseudo-class:
    - Style elements when they have focus.
    - Example: Highlight input fields when they are focused.

12. Nth-child Pseudo-class:
    - Style elements based on their order within a parent element.
    - Example: Style every second row of a table with a different background color.

# ------------------------------ Pseudo-elements ----------------------------- #

13. Before and After Pseudo-elements:
    - Insert content before or after an element's content.
    - Example: Add icons before list items.

14. First-line and First-letter Pseudo-elements:
    - Style the first line or first letter of a text block.
    - Example: Make the first letter of a paragraph larger and bold.

# -------------------------------- Combinators ------------------------------- #

15. Descendant Combinator (space):
    - Style elements that are descendants of a specified element.
    - Example: Style all `<p>` elements inside a `<div>`.

16. Child Combinator (`>`):
    - Style elements that are direct children of a specified element.
    - Example: Style only the direct child `<li>` elements of a `<ul>`.

17. Adjacent Sibling Combinator (`+`):
    - Style an element that is immediately preceded by a specified sibling element.
    - Example: Style the first paragraph `<p>` that comes immediately after an `<h1>`.

18. General Sibling Combinator (`~`):
    - Style all sibling elements that follow a specified element.
    - Example: Style all `<p>` elements that follow an `<h1>`.

# ---------------------------- Grouping Selectors ---------------------------- #

19. Group Selectors (`,`):
    - Apply the same style to multiple selectors.
    - Example: Style all `<h1>`, `<h2>`, and `<h3>` elements with the same font family.

# --------------------- Contextual and Complex Selectors --------------------- #

20. Negation Pseudo-class (`:not`):
    - Style elements that do not match a specified selector.
    - Example: Style all elements except those with the class "exclude".

21. Combined Selectors:
    - Combine multiple selectors to create more specific rules.
    - Example: Style `<input>` elements with a specific class that are also required.

These use cases illustrate how CSS selectors and combinators can be used to target and style elements in various ways, providing precise control over the presentation of a web page.